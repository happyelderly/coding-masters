{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0722bda1-d4c0-427d-bad1-6c2f9a8c6ede",
   "metadata": {},
   "source": [
    "### map함수\n",
    "\n",
    "- map(함수 , 셀 수 있는 것들(문자열, 리스트, 튜플 등등등))\n",
    "- map 함수를 사용해야 하는 이유\n",
    "\n",
    "a, b = input().split()\n",
    "a = int(a)\n",
    "b = int(b)\n",
    "\n",
    "보다는\n",
    "\n",
    "a,b=map(int,input.split())\n",
    "\n",
    "의 길이가 훨씬 짧기 때문\n",
    "\n",
    "### 주의사항\n",
    "\n",
    "- a, b = int(input().split())가 안되는 이유 :\n",
    "\n",
    "int함수엔 리스트가 들어올 수 없기 때문.\n",
    "\n",
    "\n",
    "### readline 함수\n",
    "\n",
    "\n",
    "import sys \n",
    "\n",
    "a, b = map(int,sys.stdin.readline().split())\n",
    "\n",
    "문제 풀 때에만 input 함수와 동일한 역할을 하고 더 빠르나, 길이가 길기 때문에 input 함수 사용을 넣는것을 추천?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "915b9160-301c-4285-b0be-03b4d2d01de5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 9995\n"
     ]
    }
   ],
   "source": [
    "# 가장 큰 나머지\n",
    "# 처음엔 if 구문을 사용 하였으나, max함수를 사용하면 더 쉽다는걸 깨달음\n",
    "a = int(input())\n",
    "c = max(a%5,a%7)\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6acd2b02-d9b5-47b0-a7e4-25a25dd5d442",
   "metadata": {},
   "outputs": [],
   "source": [
    "#림보게임"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "eb00cedf-e50e-4cec-9f25-c3f1eb6d8290",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 5\n",
      " 180 170 162 163 190\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P\n"
     ]
    }
   ],
   "source": [
    "N = input()\n",
    "N = int(N)\n",
    "# 림보의 횟수\n",
    "a = list(map(int, input().split()))\n",
    "# 림보가 3번 진행 될때 높이\n",
    "\n",
    "# a[] 를 대입하여 a[] <= 160 일 경우 stop 하고 I, a[] 출력\n",
    "for i in range(N):\n",
    "    if a[i] <= 160:\n",
    "        print('I',a[i])\n",
    "        break\n",
    "else:\n",
    "    print('P')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "51934a5d-c26a-4d74-bfad-410fa3134786",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 5\n",
      " 180 170 162 163 190\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P\n"
     ]
    }
   ],
   "source": [
    "N = input()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "16ee2704-ecb9-4120-baa4-a2a34dd37990",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    }
   ],
   "source": [
    "a=input()\n",
    "print(int(a)%3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "71786993-193a-410c-846a-515d16c9acf6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 10\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "100"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a=input()\n",
    "int(a)*10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "8480da4e-cdd4-42a6-8dd8-4db1ae28448f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 900\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.5434e+06\n"
     ]
    }
   ],
   "source": [
    "# 원의 넓이 \n",
    "# 어떤게 잘못 된 것인지 계속 실패를 하고 있음\n",
    "# 아니 이러면 안되는거잖아\n",
    "\n",
    "a = int(input())\n",
    "b=(a**2*3.14)\n",
    "print('{:g}'.format(b))\n",
    "\n",
    "#import sys\n",
    "#a = int(sys.stdin.readline())\n",
    "#b=(a**2*3.14)\n",
    "#print('{:g}.format(b)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "1c67989c-4c67-49e9-b3ac-89a3ef5e4f9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "314.0\n"
     ]
    }
   ],
   "source": [
    "# 원의 넓이 ver2\n",
    "\n",
    "a = int(input())\n",
    "b=(a**2*3.14)\n",
    "print(b)\n",
    "\n",
    "#이게 정답"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e3f05fb8-f772-4b8b-a4f5-ce4bea7f7ea0",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "874ed604-dad2-493c-870a-a411d96285d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2.5434e+06\n"
     ]
    }
   ],
   "source": [
    "a = 900**2*3.14\n",
    "b = '{:g}'.format(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "63c0683c-0d08-4ee1-b890-f537c2e5f9fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 512 124\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    }
   ],
   "source": [
    "# 최대공약수 구하기 \n",
    "# a와 b가 있으면 이걸 나눌거임. 계속 나눠서 몫을 찾을 거임. 근데 그게 같으면 리스트에 넣을 거임.\n",
    "# 그래서 해당 리스트 중 맨 마지막 요소를 출력 할 거임.\n",
    "# 혹은 어차피 for 구문이니까 그냥 c=i해서 튀어나오게 하는 방\n",
    "\n",
    "a, b = map(int,input().split())\n",
    "\n",
    "if a > b:\n",
    "    for i in range(1,a+1):\n",
    "        if(a%i==0)&(b%i==0):\n",
    "            c=i\n",
    "else:\n",
    "     for i in range(1,b+1):\n",
    "        if(a%i ==0)&(b%i==0):\n",
    "            c=i\n",
    "\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "ef71af72-7fbe-4202-bd54-cf980c386975",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 27 18\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "# 최대공약수 ver2\n",
    "# 레인지 함수안에 max를 사용하여 둘 중 더 큰값을 확인하는 방법을 통해 if구문 없애기\n",
    "# +1 인 이유는 파이썬 range 함수는 그 앞까지만 세주기 때문\n",
    "a, b = map(int,input().split())\n",
    "\n",
    "\n",
    "for i in range(1,max(a,b)+1):\n",
    "    if(a%i==0)&(b%i==0):\n",
    "        c=i\n",
    "\n",
    "print(c)\n",
    "\n",
    "#ver3\n",
    "# 사실 a, b 둘중에 뭐가 더 크던 작던 상관이 없음을 깨달음\n",
    "\n",
    "a, b = map(int,input().split())\n",
    "\n",
    "\n",
    "for i in range(1,a+1):\n",
    "    if(a%i==0)&(b%i==0):\n",
    "        c=i\n",
    "print(c)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "a90105ad-752e-4fdf-9175-462f369ff9fc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 2\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "max() iterable argument is empty",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[110], line 13\u001b[0m\n\u001b[0;32m     11\u001b[0m b \u001b[38;5;241m=\u001b[39m []\n\u001b[0;32m     12\u001b[0m \u001b[38;5;66;03m# 빈 리스트 하나 형성\u001b[39;00m\n\u001b[1;32m---> 13\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m2\u001b[39m, \u001b[38;5;28mmax\u001b[39m(a)):\n\u001b[0;32m     14\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m a \u001b[38;5;241m%\u001b[39m i \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[0;32m     15\u001b[0m         b\u001b[38;5;241m.\u001b[39mappend(i)\n",
      "\u001b[1;31mValueError\u001b[0m: max() iterable argument is empty"
     ]
    }
   ],
   "source": [
    "# 소수 구하기\n",
    "# 1~n 까지 갈 거임. 나머지가 계속 나오는 숫자를 구해서 리스트같은걸 만드나?\n",
    "# 나눌 때 1은 없으면 좋을 것\n",
    "# 그다음에 리스트의 길이를 구하면 끝?\n",
    "# 아니면 계속 나눠 봐 while을 사용? \n",
    "# 안되면 append 안하고, 되면 \n",
    "# ex 1 ~ 10 -> 1 /1 -> 2 2/1, 2/2 -? 3 3/1 3/2 3/3\n",
    "\n",
    "#a = range(2,int(input()))\n",
    "# 일단 숫자를 집어 넣음\n",
    "#b = []\n",
    "# 빈 리스트 하나 형성\n",
    "#for i in range(2, max(a)):\n",
    "#    if a % i == 0:\n",
    "#        b.append(i)\n",
    "#        print(b)\n",
    "\n",
    "# 안됐던 이유 : 10의 약수를 구하는 반복 구문 이었음, 또 함수를 이용하지 않으면 너무 복잡해 짐\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "445557d2-001c-429d-9840-321f1c169469",
   "metadata": {},
   "outputs": [],
   "source": [
    "del a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "4cf5b417-9e5f-4abd-9835-110cd6aea2b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "a=int(input())\n",
    "\n",
    "def k(a):\n",
    "    for i in range(2,a):\n",
    "        if a % i == 0:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "# a 가 소수인지 아닌지 구하는 함수.\n",
    "\n",
    "def l(a):\n",
    "    b = 0\n",
    "    for i in range(2,a+1):\n",
    "        if k(a) == True:\n",
    "            b+=1\n",
    "    return b\n",
    "\n",
    "print(l(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "abc8fdbf-f14c-4649-970b-6a932c56d441",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "n = int(input())\n",
    "\n",
    "def isPrime(n):\n",
    "    for i in range(2, n):\n",
    "        if n % i == 0:\n",
    "            return False # 범위안에 나누어 떨어지는 수가 있으면 소수가 아님\n",
    "    return True # 소수임\n",
    "\n",
    "def solution(n):\n",
    "    answer = 0\n",
    "    # 마찬가지로 범위 안의 모든 수에 대하여 소수찾기 함수를 돌려줌\n",
    "    for i in range(2, n+1):\n",
    "        if isPrime(i) == True:\n",
    "            answer += 1\n",
    "    return answer\n",
    "\n",
    "print(isPrime(n))\n",
    "print(solution(n))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "f713137f-3b28-49d4-a0c4-069bb3063645",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 10\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    }
   ],
   "source": [
    "n=int(input())\n",
    "\n",
    "def k(n):\n",
    "    for i in range(2,n):\n",
    "        if n%i==0:\n",
    "            return False\n",
    "    return True\n",
    "\n",
    "def l(n):\n",
    "    b=0\n",
    "    for i in range(2,n+1):\n",
    "        if k(n) == True:\n",
    "            b+=1\n",
    "    return b\n",
    "\n",
    "print(l(n))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9787f1b5-348b-433a-a9f1-6e4353b40758",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
